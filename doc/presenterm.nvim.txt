*presenterm.nvim.txt*Neovim plugin for creating and managing presenterm presentations

==============================================================================
Table of Contents                          *presenterm.nvim-table-of-contents*

1. presenterm.nvim                           |presenterm.nvim-presenterm.nvim|
  - Features                        |presenterm.nvim-presenterm.nvim-features|
  - Installation                |presenterm.nvim-presenterm.nvim-installation|
  - Usage                              |presenterm.nvim-presenterm.nvim-usage|
  - Preview Sync                |presenterm.nvim-presenterm.nvim-preview-sync|
  - Telescope Integration|presenterm.nvim-presenterm.nvim-telescope-integration|
  - Statusline Integration|presenterm.nvim-presenterm.nvim-statusline-integration|
  - Configuration              |presenterm.nvim-presenterm.nvim-configuration|
  - Presentation Structure|presenterm.nvim-presenterm.nvim-presentation-structure|
  - License                          |presenterm.nvim-presenterm.nvim-license|

==============================================================================
1. presenterm.nvim                           *presenterm.nvim-presenterm.nvim*

A Neovim plugin for creating and managing presenterm
<https://github.com/mfontanini/presenterm> presentations with enhanced support
for slide navigation, partials management, and live preview.



FEATURES                            *presenterm.nvim-presenterm.nvim-features*

- **Slide Management** : Navigate, create, delete, reorder slides with ease using vim motions or telescope picker
- **Partial Support** : Include reusable content from partial files, useful when working with multiple presentations
- **Telescope Integration** : Browse slides and partials with preview, slides with partials marked with [P]
- **Interactive Reordering**: Reorder slides interactively using vim line movements
- **Code Execution** : Toggle `presenterm` code execution markers (`+exec`, `+exec_replace` etc)
- **Execute Code Blocks** : Run code blocks directly from Neovim
- **Live Preview** : Launch `presenterm` preview in terminal with bi-directional sync
- **Bi-directional Sync** : Navigate in markdown or presenterm, both stay synchronized
- **Statistics** : View presentation stats and time estimates


INSTALLATION                    *presenterm.nvim-presenterm.nvim-installation*


LAZY.NVIM ~

>lua
    {
      "Piotr1215/presenterm.nvim",
      dependencies = {
        "nvim-telescope/telescope.nvim", -- Optional, for telescope integration
      },
      config = function()
        require("presenterm").setup({
          slide_marker = "<!-- end_slide -->",
          partials = {
            directory = "_partials",
            resolve_relative = true,
          },
          preview = {
            command = "presenterm",
            presentation_preview_sync = true,  -- Enable bi-directional sync
          },
        })
      end,
    }
<


ROCKS.NVIM ~

>vim
    :Rocks install presenterm.nvim
<


LUAROCKS ~

>bash
    luarocks install presenterm.nvim
<


USAGE                                  *presenterm.nvim-presenterm.nvim-usage*

The plugin automatically detects `presenterm` presentations (by looking for
slide markers like `<!-- end_slide -->` or frontmatter) and activates when you
open a markdown file. You can also manually activate with `:PresenterActivate`.


KEYBINDINGS ~

**Option 1: Use defaults** (recommended)

>lua
    require("presenterm").setup({
      default_keybindings = true,
    })
<

**Option 2: Customize with on_attach**

>lua
    require("presenterm").setup({
      on_attach = function(bufnr)
        vim.keymap.set("n", "]s", require("presenterm").next_slide, { buffer = bufnr, desc = "Next slide" })
        vim.keymap.set("n", "[s", require("presenterm").previous_slide, { buffer = bufnr, desc = "Previous slide" })
      end,
    })
<

**Option 3: Map commands manually**

>lua
    vim.keymap.set("n", "]s", ":PresenterNext<cr>")
    vim.keymap.set("n", "[s", ":PresenterPrev<cr>")
<

Default keymaps (when default_keybindings = true) ~

- `]s` / `[s` - Next/previous slide
- `<leader>sn` - New slide
- `<leader>ss` - Split slide
- `<leader>sd` - Delete slide
- `<leader>sy` - Yank slide
- `<leader>sv` - Select slide
- `<leader>sk` / `<leader>sj` - Move slide up/down
- `<leader>sR` - Reorder slides
- `<leader>sl` - List slides (telescope)
- `<leader>sp` - Include partial (telescope)
- `<C-e>` - Toggle +exec
- `<leader>sr` - Run code block
- `<leader>sP` - Preview presentation
- `<leader>sc` - Presentation stats


COMMANDS ~


NAVIGATION

- `:PresenterNext` - Go to next slide
- `:PresenterPrev` - Go to previous slide
- `:PresenterGoto N` - Go to slide N
- `:PresenterList` - List all slides with telescope


SLIDE MANAGEMENT

- `:PresenterNew` - Create new slide after current
- `:PresenterSplit` - Split slide at cursor position
- `:PresenterDelete` - Delete current slide
- `:PresenterYank` - Yank current slide
- `:PresenterSelect` - Visually select current slide
- `:PresenterMoveUp` - Move slide up
- `:PresenterMoveDown` - Move slide down
- `:PresenterReorder` - Interactive slide reordering


PARTIALS

- `:PresenterPartial include` - Include partial file
- `:PresenterPartial edit` - Edit partial file
- `:PresenterPartial list` - List all partials


CODE BLOCKS

- `:PresenterExec toggle` - Toggle code execution flags (plain → +exec → +exec_replace → +exec +acquire_terminal)
- `:PresenterExec run` - Run current code block


PREVIEW

- `:PresenterPreview` - Preview presentation in terminal split
- `:PresenterStats` - Show presentation statistics
- `:PresenterToggleSync` - Toggle bi-directional sync (navigate in markdown → presenterm follows, and vice versa)


OTHER

- `:PresenterActivate` - Manually activate presenterm mode
- `:PresenterDeactivate` - Deactivate presenterm mode for current buffer
- `:PresenterHelp` - Show help


PREVIEW SYNC                    *presenterm.nvim-presenterm.nvim-preview-sync*

When `presentation_preview_sync = true`, navigation is synchronized
bi-directionally:

**Buffer → Terminal**: Navigate in markdown with any motion (`j`, `k`, `gg`,
`G`, `/`, etc.) → presenterm jumps to that slide

**Terminal → Presenterm**: Navigate in presenterm (`n`, `p`, `<number>G`) →
markdown buffer cursor moves to that slide

**Requirements**: - Presenterm footer must show slide count (e.g., "1 / 10") -
Works automatically with/without frontmatter (adjusts slide numbering) - Sync
prevents loops with 100ms debounce

**Does NOT work when**: - Presenterm footer is customized to hide slide numbers
- Using custom footer configuration without "N / M" pattern


TELESCOPE INTEGRATION  *presenterm.nvim-presenterm.nvim-telescope-integration*


SLIDE PICKER ~

The slide picker shows all slides with titles extracted from the content,
including from partial files. Slides containing partials are marked with `[P]`
indicator.

- `<CR>` - Jump to selected slide
- `<C-e>` - Edit the first partial in the selected slide (if it contains any)


PARTIAL PICKER ~

The partial picker has two modes:

- **Include mode** (`:PresenterPartial include`):
    - `<CR>` - Insert include directive
    - `<C-e>` - Edit the partial file
- **Edit mode** (`:PresenterPartial edit`):
    - `<CR>` - Edit the partial file
    - `<C-i>` - Insert include directive


STATUSLINE INTEGRATION*presenterm.nvim-presenterm.nvim-statusline-integration*

You can add slide information to your statusline:

>lua
    -- For lualine
    sections = {
      lualine_x = {
        function()
          return require("presenterm").slide_status()
        end,
      },
    }
<


CONFIGURATION                  *presenterm.nvim-presenterm.nvim-configuration*

Default configuration:

>lua
    {
      slide_marker = "<!-- end_slide -->",
      partials = {
        directory = "_partials",           -- Directory name for partials
        resolve_relative = true,           -- Resolve paths relative to current file
      },
      preview = {
        command = "presenterm",              -- Preview command
        presentation_preview_sync = false,   -- Enable bi-directional sync between terminal and buffer
      },
      telescope = {
        theme = "dropdown",
        layout_config = {
          width = 0.8,
          height = 0.6,
        },
        enable_preview = true,
      },
      on_attach = nil,                     -- Optional callback function(bufnr) for buffer-local keymaps
      default_keybindings = false,         -- Set to true to enable default buffer-local keymaps
    }
<


PRESENTATION STRUCTURE*presenterm.nvim-presenterm.nvim-presentation-structure*

A typical `presenterm` presentation structure:

>
    project/
    ├── presentation.md       # Main presentation file
    └── _partials/           # Reusable content
        ├── intro.md
        ├── demo.md
        └── conclusion.md
<

Example presentation.md:

>markdown
    ---
    title: My Presentation
    author: Your Name
    ---
    
    # Welcome
    
    First slide content
    
    <!-- end_slide -->
    
    <!-- include: ../_partials/intro.md -->
    
    <!-- end_slide -->
    
    ## Demo
    
    ```bash +exec
    echo "This code can be executed"
<


LICENSE                              *presenterm.nvim-presenterm.nvim-license*

MIT

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
